var gdjs;(function(a){const o=new a.Logger("Spine Manager"),d=["spine"];class u{constructor(s,e){this._loadedSpines=new a.ResourceCache;this._resourceLoader=s,this._spineAtlasManager=e}getResourceKinds(){return d}async processResource(s){}async loadResource(s){const e=this._getSpineResource(s);if(!e)return o.error(`Unable to find spine json for resource ${s}.`);try{const r=this._resourceLoader.getRuntimeGame(),n=r.getEmbeddedResourcesNames(e.name);if(n.length!==1)return o.error(`Unable to find atlas metadata for resource spine json ${s}.`);const c=r.resolveEmbeddedResource(e.name,n[0]),l=await this._spineAtlasManager.getOrLoad(c),t=this._resourceLoader.getFullUrl(e.file);PIXI.Assets.setPreferences({preferWorkers:!1,crossOrigin:this._resourceLoader.checkIfCredentialsRequired(t)?"use-credentials":"anonymous"}),PIXI.Assets.add({alias:e.name,src:t,data:{spineAtlas:l}});const i=await PIXI.Assets.load(e.name);i.spineData?this._loadedSpines.set(e,i.spineData):o.error(`Loader cannot process spine resource ${e.name} correctly.`)}catch(r){o.error(`Error while preloading spine resource ${e.name}: ${r}`)}}getSpine(s){return this._loadedSpines.getFromName(s)}isSpineLoaded(s){return!!this._loadedSpines.getFromName(s)}_getSpineResource(s){const e=this._resourceLoader.getResource(s);return e&&this.getResourceKinds().includes(e.kind)?e:null}dispose(){this._loadedSpines.clear()}unloadResourcesList(s){s.forEach(e=>{this._loadedSpines.get(e)&&this._loadedSpines.delete(e)})}}a.SpineManager=u})(gdjs||(gdjs={}));
//# sourceMappingURL=pixi-spine-manager.js.map
